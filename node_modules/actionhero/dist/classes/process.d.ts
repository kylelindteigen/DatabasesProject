import { Initializers } from "./initializers";
export declare class Process {
    running: boolean;
    initialized: boolean;
    shuttingDown: boolean;
    bootTime: number;
    initializers: Initializers;
    startCount: number;
    loadInitializers: Array<Function>;
    startInitializers: Array<Function>;
    stopInitializers: Array<Function>;
    _startingParams: {
        [key: string]: any;
    };
    constructor();
    initialize(params?: object): Promise<any>;
    start(params?: {}): Promise<any>;
    stop(): Promise<void>;
    restart(): Promise<any>;
    /**
     * Register listeners for process signals and uncaught exceptions & rejections.
     * Try to gracefully shut down when signaled to do so
     */
    registerProcessSignals(stopCallback?: (exitCode?: number) => void): void;
    fatalError(errors: any, type: any): Promise<void>;
    flattenOrderedInitializer(collection: any): any[];
}
