export declare namespace specHelper {
    /**
     * Generate a connection to use in your tests
     */
    function buildConnection(): Promise<any>;
    /**
     * Run an action via the specHelper server.
     */
    function runAction(actionName: string, input?: {
        [key: string]: any;
    }): Promise<{
        [key: string]: any;
    }>;
    /**
     * Mock a specHelper connection requesting a file from the server.
     */
    function getStaticFile(file: string): Promise<any>;
    /**
     * Use the specHelper to run a task.
     * Note: this only runs the task's `run()` method, and no middleware.  This is faster than api.specHelper.runFullTask.
     */
    function runTask(taskName: string, params: object | Array<any>): Promise<{
        [key: string]: any;
    }>;
    /**
     * Use the specHelper to run a task.
     * Note: this will run a full Task worker, and will also include any middleware.  This is slower than api.specHelper.runTask.
     */
    function runFullTask(taskName: string, params: object | Array<any>): Promise<any>;
    /**
     * Use the specHelper to find enqueued instances of a task
     * This will return an array of instances of the task which have been enqueued either in the normal queues or delayed queues
     * If a task is enqueued in a delayed queue, it will have a 'timestamp' property
     * i.e. [ { class: 'regularTask', queue: 'testQueue', args: [ [Object] ] } ]
     */
    function findEnqueuedTasks(taskName: string): Promise<any[]>;
    /**
     * Delete all enqueued instances of a task, both in all the normal queues and all of the delayed queues
     */
    function deleteEnqueuedTasks(taskName: string, params: {}): Promise<void>;
}
