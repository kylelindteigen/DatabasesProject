import { arrayStartingMatch } from "./utils/arrayStartingMatch";
import { arrayUnique } from "./utils/arrayUnique";
import { asyncWaterfall } from "./utils/asyncWaterfall";
import { collapseObjectToArray } from "./utils/collapseObjectToArray";
import { ensureNoTsHeaderFiles } from "./utils/ensureNoTsHeaderFiles";
import { eventLoopDelay } from "./utils/eventLoopDelay";
import { filterObjectForLogging } from "./utils/filterObjectForLogging";
import { getExternalIPAddress } from "./utils/getExternalIPAddress";
import { hashMerge } from "./utils/hashMerge";
import { isPlainObject } from "./utils/isPlainObject";
import { parseHeadersForClientAddress } from "./utils/parseHeadersForClientAddress";
import { parseCookies } from "./utils/parseCookies";
import { parseIPv6URI } from "./utils/parseIPv6URI";
import { replaceDistWithSrc } from "./utils/replaceDistWithSrc";
import { sleep } from "./utils/sleep";
import { sortGlobalMiddleware } from "./utils/sortGlobalMiddleware";
import { sourceRelativeLinkPath } from "./utils/sourceRelativeLinkPath";
import { dirExists, fileExists, createDirSafely, createFileSafely, createLinkfileSafely, removeLinkfileSafely, createSymlinkSafely } from "./utils/fileUtils";
/**
 * Utility functions for Actionhero
 */
export declare const utils: {
    arrayStartingMatch: typeof arrayStartingMatch;
    arrayUnique: typeof arrayUnique;
    asyncWaterfall: typeof asyncWaterfall;
    collapseObjectToArray: typeof collapseObjectToArray;
    ensureNoTsHeaderFiles: typeof ensureNoTsHeaderFiles;
    eventLoopDelay: typeof eventLoopDelay;
    filterObjectForLogging: typeof filterObjectForLogging;
    getExternalIPAddress: typeof getExternalIPAddress;
    hashMerge: typeof hashMerge;
    isPlainObject: typeof isPlainObject;
    parseHeadersForClientAddress: typeof parseHeadersForClientAddress;
    parseCookies: typeof parseCookies;
    parseIPv6URI: typeof parseIPv6URI;
    replaceDistWithSrc: typeof replaceDistWithSrc;
    sleep: typeof sleep;
    sortGlobalMiddleware: typeof sortGlobalMiddleware;
    sourceRelativeLinkPath: typeof sourceRelativeLinkPath;
    fileUtils: {
        dirExists: typeof dirExists;
        fileExists: typeof fileExists;
        createDirSafely: typeof createDirSafely;
        createFileSafely: typeof createFileSafely;
        createLinkfileSafely: typeof createLinkfileSafely;
        removeLinkfileSafely: typeof removeLinkfileSafely;
        createSymlinkSafely: typeof createSymlinkSafely;
    };
};
