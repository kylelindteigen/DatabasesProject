/// <reference types="node" />
import { IncomingMessage } from "http";
export declare class BrowserFingerprint {
    options: {
        cookieKey?: string;
        toSetCookie?: boolean;
        onlyStaticElements?: boolean;
        settings?: {
            [key: string]: any;
        };
    };
    savedHashedHostName: string;
    savedHashedPid: number | string;
    constructor(options?: {});
    defaults(): {
        cookieKey: string;
        toSetCookie: boolean;
        onlyStaticElements: boolean;
    };
    /**
     * The goal is to come up with as many *potentially* unique traits for the connection and add them to the elementsHash.
     * The collection of all the elementsHash keys will *hopefully* be unique enough for fingerprinting
     * Then, we save this hash in a cookie for later retrieval
     */
    fingerprint(req: IncomingMessage): {
        fingerprint: string;
        elementHash: {
            clientCookie: string;
        };
        headersHash: {};
        elementsHash?: undefined;
    } | {
        fingerprint: string;
        elementsHash: {
            httpVersion: string;
            remoteAddress: string;
            cookieKey: string;
            hashedHostName: string;
            remotePort: any;
            rand: any;
            time: any;
            hashedPid: any;
        };
        headersHash: {};
        elementHash?: undefined;
    };
    hashedHostName(): string;
    hashedPid(): string | number;
    parseCookies(req: any): {};
    calculateHashFromElements(elementsHash: any): string;
    sortAndStringObject(o: {
        [key: string]: any;
    }): {
        [key: string]: any;
    };
}
