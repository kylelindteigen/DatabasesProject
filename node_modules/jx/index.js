function toString(obj) {
	return Object.prototype.toString.call(obj);
}

function set(request, header, value) {
	request.setRequestHeader(header, value);
}

function parse(request) {
	try {
		return JSON.parse(request.responseText);
	} catch (e) {
		return request.responseText;
	}
}

function csrf() {
	var cookieValue = null,
		name = 'csrftoken';
	if (document.cookie && document.cookie !== '') {
		var cookies = document.cookie.split(';');
		for (var i = 0, l = cookies.length; i < l; i++) {
			var cookie = cookies[i].trim();
			if (cookie.substring(0, name.length + 1) == (name + '=')) {
				cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
				break;
			}
		}
	}
	return cookieValue;
}

function noop() {};

function req(url, type, json, data) {
	var methods = {
		success: noop,
		error: noop,
	};

	var request = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
	var hasPayload = type === 'POST' || type === 'PATCH' || type === 'DELETE';
	
	request.open(type, url, true);

	if (json) {
		set(request, 'Content-Type', 'application/json');
		set(request, 'Accept', 'application/json');
	} else {
		set(request, 'Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
	}

	if (hasPayload) {
		if (json) data = JSON.stringify(data);		
		set(request, 'X-CSRFToken', csrf());
	}
	set(request, 'X-Requested-With', 'XMLHttpRequest');
	
	request.onreadystatechange = function() {
		if (request.readyState === 4) {
			if (request.status >= 200 && request.status < 300) {
				methods.success.call(request, parse(request), request);
			} else {
				methods.error.call(request, parse(request), request);
			}
		}
	};
	
	hasPayload ? request.send(data) : request.send();

	var returned = {
		success: function (callback) {
			methods.success = callback;
			return returned;
		},
		error: function (callback) {
			methods.error = callback;
			return returned;
		}
	};

	return returned;
}

module.exports = {
	get: function(url) {
		return req(url, 'GET', false, null);
	},
	post: function(url, data) {
		return req(url, 'POST', false, data);
	},
	patch: function(url, data) {
		return req(url, 'PATCH', false, data);
	},
	"delete": function(url) {
		return req(url, 'DELETE', false, null);
	},
	json: {
		get: function(url) {
			return req(url, 'GET', true, null);
		},
		post: function(url, data) {
			return req(url, 'POST', true, data);
		},
		patch: function(url, data) {
			return req(url, 'PATCH', true, data);
		},
	},
};